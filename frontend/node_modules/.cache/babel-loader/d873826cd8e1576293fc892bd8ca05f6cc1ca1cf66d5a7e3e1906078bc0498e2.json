{"ast":null,"code":"// ---------- Лимит на выдачу книг ----------\n\nexport const Blanks_LIMIT = 7;\n\n// ---------- Адрес сервера ----------\n\nconst URL = \"http://localhost:5000\";\n\n// ---------- Запрос на получение всех читателей и выданных книг ----------\n\nexport const fetchAllData = async setData => {\n  try {\n    const response = await fetch(`${URL}/Suppliers`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Ошибка при получении данных');\n    }\n    const data = await response.json();\n    setData(data);\n  } catch (error) {\n    console.error('Ошибка при первичной загрузке данных:', error.message);\n    alert('Ошибка при первичной загрузке данных: ' + error.message);\n  }\n};\n\n// ---------- Запрос на добавление читателя ----------\n\nexport const addReader = async data => {\n  try {\n    const response = await fetch(`${URL}/Suppliers/add`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    });\n    if (!response.ok) {\n      throw new Error('Ошибка при добавлении читателя');\n    }\n    alert('Читатель успешно добавлен!');\n    return 200;\n  } catch (error) {\n    console.error('Ошибка:', error.message);\n    alert('Ошибка при добавлении читателя: ' + error.message);\n  }\n};\n\n// ---------- Запрос на удаление читателя по его ID ----------\n\nexport const deleteReader = async id => {\n  try {\n    const response = await fetch(`${URL}/Suppliers/delete/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || 'Ошибка при удалении читателя');\n    }\n    const result = await response.json();\n    return result;\n  } catch (error) {\n    console.error('Ошибка:', error.message);\n    alert('Ошибка при удалении читателя: ' + error.message);\n  }\n};\n\n// ---------- Запрос на редактирование данных читателя ----------\n\nexport const editReader = async (data, id) => {\n  try {\n    const response = await fetch(`${URL}/Suppliers/edit/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    });\n    if (!response.ok) {\n      throw new Error('Ошибка при обновлении данных читателя');\n    }\n    alert('Данные читателя успешно обновлены!');\n    return 200;\n  } catch (error) {\n    console.error('Ошибка:', error.message);\n    alert('Ошибка при обновлении данных читателя: ' + error.message);\n  }\n};\n\n// ---------- Запрос на получение всех книг ----------\n\nexport const getBlanks = async setData => {\n  try {\n    const response = await fetch(`${URL}/Blanks`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Ошибка при получении книг');\n    }\n    const data = await response.json();\n    setData(data);\n  } catch (error) {\n    console.error('Ошибка при загрузке книг:', error.message);\n    alert('Ошибка при загрузке книг: ' + error.message);\n  }\n};\n\n// ---------- Запрос на добавление книги ----------\n\nexport const addBook = async data => {\n  try {\n    const response = await fetch(`${URL}/Blanks/add`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    });\n    if (!response.ok) {\n      throw new Error('Ошибка при добавлении книги');\n    }\n    alert('Книга успешно добавлена!');\n    return 200;\n  } catch (error) {\n    console.error('Ошибка:', error.message);\n    alert('Ошибка при добавлении книги: ' + error.message);\n  }\n};\n\n// ---------- Запрос на редактирование книги ----------\n\nexport const editBook = async (data, id) => {\n  try {\n    const response = await fetch(`${URL}/Blanks/edit/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    });\n    if (!response.ok) {\n      throw new Error('Ошибка при обновлении данных о книге');\n    }\n    alert('Данные о книге успешно обновлены!');\n    return 200;\n  } catch (error) {\n    console.error('Ошибка:', error.message);\n    alert('Ошибка при обновлении данных о книге: ' + error.message);\n  }\n};\n\n// ---------- Запрос на выдачу книги читателю ----------\n\nexport const issueBook = async data => {\n  try {\n    const response = await fetch(`${URL}/issue-book`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    });\n    if (!response.ok) {\n      throw new Error('Ошибка при выдаче книги читателю');\n    }\n    alert('Книга успешно выдана читателю!');\n    return 200;\n  } catch (error) {\n    console.error('Ошибка:', error.message);\n    alert('Ошибка при выдаче книги читателю: ' + error.message);\n  }\n};\n\n// ---------- Запрос на возвращение книги в библиотеку ----------\n\nexport const returnBook = async data => {\n  try {\n    const response = await fetch(`${URL}/return-book`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    });\n    if (!response.ok) {\n      throw new Error('Ошибка при возвращении книги в библиотеку');\n    }\n    alert('Книга успешно возвращена в библиотеку!');\n    return 200;\n  } catch (error) {\n    console.error('Ошибка:', error.message);\n    alert('Ошибка при возвращении книги в библиотеку: ' + error.message);\n  }\n};\n\n// ---------- Запрос на перемещение книги между читателями ----------\n\nexport const transferBook = async data => {\n  try {\n    const response = await fetch(`${URL}/transfer-book`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    });\n    if (!response.ok) {\n      throw new Error('Ошибка при перемещении книги между читателями');\n    }\n    alert('Книга успешно передана другому читателю!');\n    return 200;\n  } catch (error) {\n    console.error('Ошибка:', error.message);\n    alert('Ошибка при перемещении книги между читателями: ' + error.message);\n  }\n};","map":{"version":3,"names":["Blanks_LIMIT","URL","fetchAllData","setData","response","fetch","method","headers","ok","Error","data","json","error","console","message","alert","addReader","body","JSON","stringify","deleteReader","id","errorData","result","editReader","getBlanks","addBook","editBook","issueBook","returnBook","transferBook"],"sources":["C:/Users/irkam/Desktop/Burkov/frontend/src/requests.js"],"sourcesContent":["// ---------- Лимит на выдачу книг ----------\r\n\r\nexport const Blanks_LIMIT = 7;\r\n\r\n// ---------- Адрес сервера ----------\r\n\r\nconst URL = \"http://localhost:5000\";\r\n\r\n// ---------- Запрос на получение всех читателей и выданных книг ----------\r\n\r\nexport const fetchAllData = async (setData) => {\r\n    try {\r\n      const response = await fetch(`${URL}/Suppliers`, {\r\n        method: 'GET',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n    });\r\n      if (!response.ok) {\r\n        throw new Error('Ошибка при получении данных');\r\n      }\r\n\r\n      const data = await response.json();\r\n      \r\n      setData(data);\r\n    } catch (error) {\r\n      console.error('Ошибка при первичной загрузке данных:', error.message);\r\n      alert('Ошибка при первичной загрузке данных: ' + error.message);\r\n    }\r\n};\r\n\r\n// ---------- Запрос на добавление читателя ----------\r\n\r\nexport const addReader = async (data) => {\r\n  try {\r\n\r\n    const response = await fetch(`${URL}/Suppliers/add`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Ошибка при добавлении читателя');\r\n    }\r\n\r\n    alert('Читатель успешно добавлен!');\r\n    return 200;\r\n\r\n  } catch (error) {\r\n    console.error('Ошибка:', error.message);\r\n    alert('Ошибка при добавлении читателя: ' + error.message);\r\n  }\r\n};\r\n\r\n// ---------- Запрос на удаление читателя по его ID ----------\r\n\r\nexport const deleteReader = async (id) => {\r\n    try {\r\n        const response = await fetch(`${URL}/Suppliers/delete/${id}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const errorData = await response.json();\r\n            throw new Error(errorData.error || 'Ошибка при удалении читателя');\r\n        }\r\n\r\n        const result = await response.json();\r\n        return result; \r\n    } catch (error) {\r\n        console.error('Ошибка:', error.message);\r\n        alert('Ошибка при удалении читателя: ' + error.message);\r\n    }\r\n};\r\n\r\n// ---------- Запрос на редактирование данных читателя ----------\r\n\r\nexport const editReader = async (data, id) => {\r\n  try {\r\n\r\n    const response = await fetch(`${URL}/Suppliers/edit/${id}`, {\r\n      method: 'PUT', \r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Ошибка при обновлении данных читателя');\r\n    }\r\n\r\n    alert('Данные читателя успешно обновлены!');\r\n    return 200;\r\n\r\n  } catch (error) {\r\n    console.error('Ошибка:', error.message);\r\n    alert('Ошибка при обновлении данных читателя: ' + error.message);\r\n  }\r\n};\r\n\r\n// ---------- Запрос на получение всех книг ----------\r\n\r\nexport const getBlanks = async (setData) => {\r\n  try {\r\n      const response = await fetch(`${URL}/Blanks`, {\r\n          method: 'GET',\r\n          headers: {\r\n              'Content-Type': 'application/json',\r\n          },\r\n      });\r\n\r\n      if (!response.ok) {\r\n          throw new Error('Ошибка при получении книг');\r\n      }\r\n\r\n      const data = await response.json();\r\n      setData(data)\r\n  } catch (error) {\r\n      console.error('Ошибка при загрузке книг:', error.message);\r\n      alert('Ошибка при загрузке книг: ' + error.message);\r\n  }\r\n};\r\n\r\n// ---------- Запрос на добавление книги ----------\r\n\r\nexport const addBook = async (data) => {\r\n  try {\r\n\r\n    const response = await fetch(`${URL}/Blanks/add`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Ошибка при добавлении книги');\r\n    }\r\n\r\n    alert('Книга успешно добавлена!');\r\n    return 200;\r\n\r\n  } catch (error) {\r\n    console.error('Ошибка:', error.message);\r\n    alert('Ошибка при добавлении книги: ' + error.message);\r\n  }\r\n};\r\n\r\n// ---------- Запрос на редактирование книги ----------\r\n\r\nexport const editBook = async (data, id) => {\r\n  try {\r\n\r\n    const response = await fetch(`${URL}/Blanks/edit/${id}`, {\r\n      method: 'PUT', \r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Ошибка при обновлении данных о книге');\r\n    }\r\n\r\n    alert('Данные о книге успешно обновлены!');\r\n    return 200;\r\n\r\n  } catch (error) {\r\n    console.error('Ошибка:', error.message);\r\n    alert('Ошибка при обновлении данных о книге: ' + error.message);\r\n  }\r\n};\r\n\r\n// ---------- Запрос на выдачу книги читателю ----------\r\n\r\nexport const issueBook = async (data) => {\r\n  try {\r\n\r\n    const response = await fetch(`${URL}/issue-book`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Ошибка при выдаче книги читателю');\r\n    }\r\n\r\n    alert('Книга успешно выдана читателю!');\r\n    return 200;\r\n\r\n  } catch (error) {\r\n    console.error('Ошибка:', error.message);\r\n    alert('Ошибка при выдаче книги читателю: ' + error.message);\r\n  }\r\n};\r\n\r\n// ---------- Запрос на возвращение книги в библиотеку ----------\r\n\r\nexport const returnBook = async (data) => {\r\n  try {\r\n\r\n    const response = await fetch(`${URL}/return-book`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Ошибка при возвращении книги в библиотеку');\r\n    }\r\n\r\n    alert('Книга успешно возвращена в библиотеку!');\r\n    return 200;\r\n\r\n  } catch (error) {\r\n    console.error('Ошибка:', error.message);\r\n    alert('Ошибка при возвращении книги в библиотеку: ' + error.message);\r\n  }\r\n};\r\n\r\n// ---------- Запрос на перемещение книги между читателями ----------\r\n\r\nexport const transferBook = async (data) => {\r\n  try {\r\n\r\n    const response = await fetch(`${URL}/transfer-book`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Ошибка при перемещении книги между читателями');\r\n    }\r\n\r\n    alert('Книга успешно передана другому читателю!');\r\n    return 200;\r\n\r\n  } catch (error) {\r\n    console.error('Ошибка:', error.message);\r\n    alert('Ошибка при перемещении книги между читателями: ' + error.message);\r\n  }\r\n};\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}