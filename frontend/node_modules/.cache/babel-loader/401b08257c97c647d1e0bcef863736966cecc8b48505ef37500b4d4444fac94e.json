{"ast":null,"code":"// ---------- Лимит на поставку заготовок ----------\nexport const Blanks_LIMIT=7;// ---------- Адрес сервера ----------\nconst URL=\"http://localhost:5000\";// ---------- Запрос на получение всех поставщиков и заготовок ----------\nexport const fetchAllData=async setData=>{try{const response=await fetch(\"\".concat(URL,\"/Suppliers\"),{method:'GET',headers:{'Content-Type':'application/json'}});if(!response.ok){throw new Error('Ошибка при получении данных');}const data=await response.json();setData(data);}catch(error){console.error('Ошибка при первичной загрузке данных:',error.message);alert('Ошибка при первичной загрузке данных: '+error.message);}};// ---------- Запрос на Добавление поставщика ----------\nexport const addReader=async data=>{try{const response=await fetch(\"\".concat(URL,\"/Suppliers/add\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(data)});if(!response.ok){throw new Error('Ошибка при добавлении поставщика');}alert('Поставщик успешно добавлен!');return 200;}catch(error){console.error('Ошибка:',error.message);alert('Ошибка при добавлении поставщика: '+error.message);}};// ---------- Запрос на удаление поставщика по его ID ----------\nexport const deleteReader=async id=>{try{const response=await fetch(\"\".concat(URL,\"/Suppliers/delete/\").concat(id),{method:'DELETE',headers:{'Content-Type':'application/json'}});if(!response.ok){const errorData=await response.json();throw new Error(errorData.error||'Ошибка при удалении поставщика');}const result=await response.json();return result;}catch(error){console.error('Ошибка:',error.message);alert('Ошибка при удалении поставщика: '+error.message);}};// ---------- Запрос на редактирование данных поставщика ----------\nexport const editReader=async(data,id)=>{try{const response=await fetch(\"\".concat(URL,\"/Suppliers/edit/\").concat(id),{method:'PUT',headers:{'Content-Type':'application/json'},body:JSON.stringify(data)});if(!response.ok){throw new Error('Ошибка при обновлении данных поставщика');}alert('Данные поставщика успешно обновлены!');return 200;}catch(error){console.error('Ошибка:',error.message);alert('Ошибка при обновлении данных поставщика: '+error.message);}};// ---------- Запрос на добавление всех заготовок ----------\nexport const getBlanks=async setData=>{try{const response=await fetch(\"\".concat(URL,\"/Blanks\"),{method:'GET',headers:{'Content-Type':'application/json'}});if(!response.ok){throw new Error('Ошибка при поставке заготовок');}const data=await response.json();setData(data);}catch(error){console.error('Ошибка при поставке заготовок:',error.message);alert('Ошибка при поставке заготовки: '+error.message);}};// ---------- Запрос на Добавление заготовки ----------\nexport const addBook=async data=>{try{const response=await fetch(\"\".concat(URL,\"/Blanks/add\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(data)});if(!response.ok){throw new Error('Ошибка при добавлении заготовки');}alert('Заготовка успешно добавлена!');return 200;}catch(error){console.error('Ошибка:',error.message);alert('Ошибка при добавлении Заготовки: '+error.message);}};// ---------- Запрос на редактирование заготовки ----------\nexport const editBook=async(data,id)=>{try{const response=await fetch(\"\".concat(URL,\"/Blanks/edit/\").concat(id),{method:'PUT',headers:{'Content-Type':'application/json'},body:JSON.stringify(data)});if(!response.ok){throw new Error('Ошибка при обновлении данных о заготовке');}alert('Данные о заготовке успешно обновлены!');return 200;}catch(error){console.error('Ошибка:',error.message);alert('Ошибка при обновлении данных о заготовке: '+error.message);}};// ---------- Запрос на поставку ----------\nexport const issueBook=async data=>{try{const response=await fetch(\"\".concat(URL,\"/supply-blank\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(data)});if(!response.ok){throw new Error('Ошибка при сообщении о поставке');}alert('Сообщение успешно добавлен!');return 200;}catch(error){console.error('Ошибка:',error.message);alert('Ошибка при всообщении о поставке: '+error.message);}};// ---------- Запрос на возвращение заготовки на склад ----------\nexport const returnBook=async data=>{try{const response=await fetch(\"\".concat(URL,\"/new-blank\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(data)});if(!response.ok){throw new Error('Ошибка при возвращении заготовки на склад');}alert('Заготовка успешно возвращена на склад!');return 200;}catch(error){console.error('Ошибка:',error.message);alert('Ошибка при возвращении заготовки на склад: '+error.message);}};// ---------- Запрос на перемещение заготовки между поставщиками ----------\nexport const transferBook=async data=>{try{const response=await fetch(\"\".concat(URL,\"/transfer-blank\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(data)});if(!response.ok){throw new Error('Ошибка при перемещении заготовки между поставщиками');}alert('Заготовкаа успешно перенаправлена другому поставщику!');return 200;}catch(error){console.error('Ошибка:',error.message);alert('Ошибка при перемещении заготовки между поставщиками: '+error.message);}};","map":{"version":3,"names":["Blanks_LIMIT","URL","fetchAllData","setData","response","fetch","concat","method","headers","ok","Error","data","json","error","console","message","alert","addReader","body","JSON","stringify","deleteReader","id","errorData","result","editReader","getBlanks","addBook","editBook","issueBook","returnBook","transferBook"],"sources":["C:/Users/Admin/Desktop/stock/frontend/src/requests.js"],"sourcesContent":["// ---------- Лимит на поставку заготовок ----------\r\n\r\nexport const Blanks_LIMIT = 7;\r\n\r\n// ---------- Адрес сервера ----------\r\n\r\nconst URL = \"http://localhost:5000\";\r\n\r\n// ---------- Запрос на получение всех поставщиков и заготовок ----------\r\n\r\nexport const fetchAllData = async (setData) => {\r\n    try {\r\n      const response = await fetch(`${URL}/Suppliers`, {\r\n        method: 'GET',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n    });\r\n      if (!response.ok) {\r\n        throw new Error('Ошибка при получении данных');\r\n      }\r\n\r\n      const data = await response.json();\r\n      \r\n      setData(data);\r\n    } catch (error) {\r\n      console.error('Ошибка при первичной загрузке данных:', error.message);\r\n      alert('Ошибка при первичной загрузке данных: ' + error.message);\r\n    }\r\n};\r\n\r\n// ---------- Запрос на Добавление поставщика ----------\r\n\r\nexport const addReader = async (data) => {\r\n  try {\r\n\r\n    const response = await fetch(`${URL}/Suppliers/add`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Ошибка при добавлении поставщика');\r\n    }\r\n\r\n    alert('Поставщик успешно добавлен!');\r\n    return 200;\r\n\r\n  } catch (error) {\r\n    console.error('Ошибка:', error.message);\r\n    alert('Ошибка при добавлении поставщика: ' + error.message);\r\n  }\r\n};\r\n\r\n// ---------- Запрос на удаление поставщика по его ID ----------\r\n\r\nexport const deleteReader = async (id) => {\r\n    try {\r\n        const response = await fetch(`${URL}/Suppliers/delete/${id}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const errorData = await response.json();\r\n            throw new Error(errorData.error || 'Ошибка при удалении поставщика');\r\n        }\r\n\r\n        const result = await response.json();\r\n        return result; \r\n    } catch (error) {\r\n        console.error('Ошибка:', error.message);\r\n        alert('Ошибка при удалении поставщика: ' + error.message);\r\n    }\r\n};\r\n\r\n// ---------- Запрос на редактирование данных поставщика ----------\r\n\r\nexport const editReader = async (data, id) => {\r\n  try {\r\n\r\n    const response = await fetch(`${URL}/Suppliers/edit/${id}`, {\r\n      method: 'PUT', \r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Ошибка при обновлении данных поставщика');\r\n    }\r\n\r\n    alert('Данные поставщика успешно обновлены!');\r\n    return 200;\r\n\r\n  } catch (error) {\r\n    console.error('Ошибка:', error.message);\r\n    alert('Ошибка при обновлении данных поставщика: ' + error.message);\r\n  }\r\n};\r\n\r\n// ---------- Запрос на добавление всех заготовок ----------\r\n\r\nexport const getBlanks = async (setData) => {\r\n  try {\r\n      const response = await fetch(`${URL}/Blanks`, {\r\n          method: 'GET',\r\n          headers: {\r\n              'Content-Type': 'application/json',\r\n          },\r\n      });\r\n\r\n      if (!response.ok) {\r\n          throw new Error('Ошибка при поставке заготовок');\r\n      }\r\n\r\n      const data = await response.json();\r\n      setData(data)\r\n  } catch (error) {\r\n      console.error('Ошибка при поставке заготовок:', error.message);\r\n      alert('Ошибка при поставке заготовки: ' + error.message);\r\n  }\r\n};\r\n\r\n// ---------- Запрос на Добавление заготовки ----------\r\n\r\nexport const addBook = async (data) => {\r\n  try {\r\n\r\n    const response = await fetch(`${URL}/Blanks/add`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Ошибка при добавлении заготовки');\r\n    }\r\n\r\n    alert('Заготовка успешно добавлена!');\r\n    return 200;\r\n\r\n  } catch (error) {\r\n    console.error('Ошибка:', error.message);\r\n    alert('Ошибка при добавлении Заготовки: ' + error.message);\r\n  }\r\n};\r\n\r\n// ---------- Запрос на редактирование заготовки ----------\r\n\r\nexport const editBook = async (data, id) => {\r\n  try {\r\n\r\n    const response = await fetch(`${URL}/Blanks/edit/${id}`, {\r\n      method: 'PUT', \r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Ошибка при обновлении данных о заготовке');\r\n    }\r\n\r\n    alert('Данные о заготовке успешно обновлены!');\r\n    return 200;\r\n\r\n  } catch (error) {\r\n    console.error('Ошибка:', error.message);\r\n    alert('Ошибка при обновлении данных о заготовке: ' + error.message);\r\n  }\r\n};\r\n\r\n// ---------- Запрос на поставку ----------\r\n\r\nexport const issueBook = async (data) => {\r\n  try {\r\n\r\n    const response = await fetch(`${URL}/supply-blank`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Ошибка при сообщении о поставке');\r\n    }\r\n\r\n    alert('Сообщение успешно добавлен!');\r\n    return 200;\r\n\r\n  } catch (error) {\r\n    console.error('Ошибка:', error.message);\r\n    alert('Ошибка при всообщении о поставке: ' + error.message);\r\n  }\r\n};\r\n\r\n// ---------- Запрос на возвращение заготовки на склад ----------\r\n\r\nexport const returnBook = async (data) => {\r\n  try {\r\n\r\n    const response = await fetch(`${URL}/new-blank`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Ошибка при возвращении заготовки на склад');\r\n    }\r\n\r\n    alert('Заготовка успешно возвращена на склад!');\r\n    return 200;\r\n\r\n  } catch (error) {\r\n    console.error('Ошибка:', error.message);\r\n    alert('Ошибка при возвращении заготовки на склад: ' + error.message);\r\n  }\r\n};\r\n\r\n// ---------- Запрос на перемещение заготовки между поставщиками ----------\r\n\r\nexport const transferBook = async (data) => {\r\n  try {\r\n\r\n    const response = await fetch(`${URL}/transfer-blank`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Ошибка при перемещении заготовки между поставщиками');\r\n    }\r\n\r\n    alert('Заготовкаа успешно перенаправлена другому поставщику!');\r\n    return 200;\r\n\r\n  } catch (error) {\r\n    console.error('Ошибка:', error.message);\r\n    alert('Ошибка при перемещении заготовки между поставщиками: ' + error.message);\r\n  }\r\n};\r\n\r\n"],"mappings":"AAAA;AAEA,MAAO,MAAM,CAAAA,YAAY,CAAG,CAAC,CAE7B;AAEA,KAAM,CAAAC,GAAG,CAAG,uBAAuB,CAEnC;AAEA,MAAO,MAAM,CAAAC,YAAY,CAAG,KAAO,CAAAC,OAAO,EAAK,CAC3C,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,IAAAC,MAAA,CAAIL,GAAG,eAAc,CAC/CM,MAAM,CAAE,KAAK,CACbC,OAAO,CAAE,CACL,cAAc,CAAE,kBACpB,CACJ,CAAC,CAAC,CACA,GAAI,CAACJ,QAAQ,CAACK,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,6BAA6B,CAAC,CAChD,CAEA,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAP,QAAQ,CAACQ,IAAI,CAAC,CAAC,CAElCT,OAAO,CAACQ,IAAI,CAAC,CACf,CAAE,MAAOE,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,uCAAuC,CAAEA,KAAK,CAACE,OAAO,CAAC,CACrEC,KAAK,CAAC,wCAAwC,CAAGH,KAAK,CAACE,OAAO,CAAC,CACjE,CACJ,CAAC,CAED;AAEA,MAAO,MAAM,CAAAE,SAAS,CAAG,KAAO,CAAAN,IAAI,EAAK,CACvC,GAAI,CAEF,KAAM,CAAAP,QAAQ,CAAG,KAAM,CAAAC,KAAK,IAAAC,MAAA,CAAIL,GAAG,mBAAkB,CACnDM,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDU,IAAI,CAAEC,IAAI,CAACC,SAAS,CAACT,IAAI,CAC3B,CAAC,CAAC,CAEF,GAAI,CAACP,QAAQ,CAACK,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,kCAAkC,CAAC,CACrD,CAEAM,KAAK,CAAC,6BAA6B,CAAC,CACpC,MAAO,IAAG,CAEZ,CAAE,MAAOH,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,SAAS,CAAEA,KAAK,CAACE,OAAO,CAAC,CACvCC,KAAK,CAAC,oCAAoC,CAAGH,KAAK,CAACE,OAAO,CAAC,CAC7D,CACF,CAAC,CAED;AAEA,MAAO,MAAM,CAAAM,YAAY,CAAG,KAAO,CAAAC,EAAE,EAAK,CACtC,GAAI,CACA,KAAM,CAAAlB,QAAQ,CAAG,KAAM,CAAAC,KAAK,IAAAC,MAAA,CAAIL,GAAG,uBAAAK,MAAA,CAAqBgB,EAAE,EAAI,CAC1Df,MAAM,CAAE,QAAQ,CAChBC,OAAO,CAAE,CACL,cAAc,CAAE,kBACpB,CACJ,CAAC,CAAC,CAEF,GAAI,CAACJ,QAAQ,CAACK,EAAE,CAAE,CACd,KAAM,CAAAc,SAAS,CAAG,KAAM,CAAAnB,QAAQ,CAACQ,IAAI,CAAC,CAAC,CACvC,KAAM,IAAI,CAAAF,KAAK,CAACa,SAAS,CAACV,KAAK,EAAI,gCAAgC,CAAC,CACxE,CAEA,KAAM,CAAAW,MAAM,CAAG,KAAM,CAAApB,QAAQ,CAACQ,IAAI,CAAC,CAAC,CACpC,MAAO,CAAAY,MAAM,CACjB,CAAE,MAAOX,KAAK,CAAE,CACZC,OAAO,CAACD,KAAK,CAAC,SAAS,CAAEA,KAAK,CAACE,OAAO,CAAC,CACvCC,KAAK,CAAC,kCAAkC,CAAGH,KAAK,CAACE,OAAO,CAAC,CAC7D,CACJ,CAAC,CAED;AAEA,MAAO,MAAM,CAAAU,UAAU,CAAG,KAAAA,CAAOd,IAAI,CAAEW,EAAE,GAAK,CAC5C,GAAI,CAEF,KAAM,CAAAlB,QAAQ,CAAG,KAAM,CAAAC,KAAK,IAAAC,MAAA,CAAIL,GAAG,qBAAAK,MAAA,CAAmBgB,EAAE,EAAI,CAC1Df,MAAM,CAAE,KAAK,CACbC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDU,IAAI,CAAEC,IAAI,CAACC,SAAS,CAACT,IAAI,CAC3B,CAAC,CAAC,CAEF,GAAI,CAACP,QAAQ,CAACK,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,yCAAyC,CAAC,CAC5D,CAEAM,KAAK,CAAC,sCAAsC,CAAC,CAC7C,MAAO,IAAG,CAEZ,CAAE,MAAOH,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,SAAS,CAAEA,KAAK,CAACE,OAAO,CAAC,CACvCC,KAAK,CAAC,2CAA2C,CAAGH,KAAK,CAACE,OAAO,CAAC,CACpE,CACF,CAAC,CAED;AAEA,MAAO,MAAM,CAAAW,SAAS,CAAG,KAAO,CAAAvB,OAAO,EAAK,CAC1C,GAAI,CACA,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,IAAAC,MAAA,CAAIL,GAAG,YAAW,CAC1CM,MAAM,CAAE,KAAK,CACbC,OAAO,CAAE,CACL,cAAc,CAAE,kBACpB,CACJ,CAAC,CAAC,CAEF,GAAI,CAACJ,QAAQ,CAACK,EAAE,CAAE,CACd,KAAM,IAAI,CAAAC,KAAK,CAAC,+BAA+B,CAAC,CACpD,CAEA,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAP,QAAQ,CAACQ,IAAI,CAAC,CAAC,CAClCT,OAAO,CAACQ,IAAI,CAAC,CACjB,CAAE,MAAOE,KAAK,CAAE,CACZC,OAAO,CAACD,KAAK,CAAC,gCAAgC,CAAEA,KAAK,CAACE,OAAO,CAAC,CAC9DC,KAAK,CAAC,iCAAiC,CAAGH,KAAK,CAACE,OAAO,CAAC,CAC5D,CACF,CAAC,CAED;AAEA,MAAO,MAAM,CAAAY,OAAO,CAAG,KAAO,CAAAhB,IAAI,EAAK,CACrC,GAAI,CAEF,KAAM,CAAAP,QAAQ,CAAG,KAAM,CAAAC,KAAK,IAAAC,MAAA,CAAIL,GAAG,gBAAe,CAChDM,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDU,IAAI,CAAEC,IAAI,CAACC,SAAS,CAACT,IAAI,CAC3B,CAAC,CAAC,CAEF,GAAI,CAACP,QAAQ,CAACK,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,iCAAiC,CAAC,CACpD,CAEAM,KAAK,CAAC,8BAA8B,CAAC,CACrC,MAAO,IAAG,CAEZ,CAAE,MAAOH,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,SAAS,CAAEA,KAAK,CAACE,OAAO,CAAC,CACvCC,KAAK,CAAC,mCAAmC,CAAGH,KAAK,CAACE,OAAO,CAAC,CAC5D,CACF,CAAC,CAED;AAEA,MAAO,MAAM,CAAAa,QAAQ,CAAG,KAAAA,CAAOjB,IAAI,CAAEW,EAAE,GAAK,CAC1C,GAAI,CAEF,KAAM,CAAAlB,QAAQ,CAAG,KAAM,CAAAC,KAAK,IAAAC,MAAA,CAAIL,GAAG,kBAAAK,MAAA,CAAgBgB,EAAE,EAAI,CACvDf,MAAM,CAAE,KAAK,CACbC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDU,IAAI,CAAEC,IAAI,CAACC,SAAS,CAACT,IAAI,CAC3B,CAAC,CAAC,CAEF,GAAI,CAACP,QAAQ,CAACK,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,0CAA0C,CAAC,CAC7D,CAEAM,KAAK,CAAC,uCAAuC,CAAC,CAC9C,MAAO,IAAG,CAEZ,CAAE,MAAOH,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,SAAS,CAAEA,KAAK,CAACE,OAAO,CAAC,CACvCC,KAAK,CAAC,4CAA4C,CAAGH,KAAK,CAACE,OAAO,CAAC,CACrE,CACF,CAAC,CAED;AAEA,MAAO,MAAM,CAAAc,SAAS,CAAG,KAAO,CAAAlB,IAAI,EAAK,CACvC,GAAI,CAEF,KAAM,CAAAP,QAAQ,CAAG,KAAM,CAAAC,KAAK,IAAAC,MAAA,CAAIL,GAAG,kBAAiB,CAClDM,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDU,IAAI,CAAEC,IAAI,CAACC,SAAS,CAACT,IAAI,CAC3B,CAAC,CAAC,CAEF,GAAI,CAACP,QAAQ,CAACK,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,iCAAiC,CAAC,CACpD,CAEAM,KAAK,CAAC,6BAA6B,CAAC,CACpC,MAAO,IAAG,CAEZ,CAAE,MAAOH,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,SAAS,CAAEA,KAAK,CAACE,OAAO,CAAC,CACvCC,KAAK,CAAC,oCAAoC,CAAGH,KAAK,CAACE,OAAO,CAAC,CAC7D,CACF,CAAC,CAED;AAEA,MAAO,MAAM,CAAAe,UAAU,CAAG,KAAO,CAAAnB,IAAI,EAAK,CACxC,GAAI,CAEF,KAAM,CAAAP,QAAQ,CAAG,KAAM,CAAAC,KAAK,IAAAC,MAAA,CAAIL,GAAG,eAAc,CAC/CM,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDU,IAAI,CAAEC,IAAI,CAACC,SAAS,CAACT,IAAI,CAC3B,CAAC,CAAC,CAEF,GAAI,CAACP,QAAQ,CAACK,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,2CAA2C,CAAC,CAC9D,CAEAM,KAAK,CAAC,wCAAwC,CAAC,CAC/C,MAAO,IAAG,CAEZ,CAAE,MAAOH,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,SAAS,CAAEA,KAAK,CAACE,OAAO,CAAC,CACvCC,KAAK,CAAC,6CAA6C,CAAGH,KAAK,CAACE,OAAO,CAAC,CACtE,CACF,CAAC,CAED;AAEA,MAAO,MAAM,CAAAgB,YAAY,CAAG,KAAO,CAAApB,IAAI,EAAK,CAC1C,GAAI,CAEF,KAAM,CAAAP,QAAQ,CAAG,KAAM,CAAAC,KAAK,IAAAC,MAAA,CAAIL,GAAG,oBAAmB,CACpDM,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDU,IAAI,CAAEC,IAAI,CAACC,SAAS,CAACT,IAAI,CAC3B,CAAC,CAAC,CAEF,GAAI,CAACP,QAAQ,CAACK,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,qDAAqD,CAAC,CACxE,CAEAM,KAAK,CAAC,uDAAuD,CAAC,CAC9D,MAAO,IAAG,CAEZ,CAAE,MAAOH,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,SAAS,CAAEA,KAAK,CAACE,OAAO,CAAC,CACvCC,KAAK,CAAC,uDAAuD,CAAGH,KAAK,CAACE,OAAO,CAAC,CAChF,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}